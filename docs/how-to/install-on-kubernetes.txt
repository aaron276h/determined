.. _install-on-kubernetes:

Install Determined on Kubernetes
================================

This document describes how to install Determined on `Kubernetes <https://kubernetes.io/>`_. The installation
is performed using the `Determined Helm Chart <https://github.com/determined-ai/determined/tree/master/helm/charts/determined>`_.
When installing using the Helm chart, all configurations will be done within
`values.yaml <https://github.com/determined-ai/determined/blob/master/helm/charts/determined/values.yaml>`_ and
`Chart.yaml <https://github.com/determined-ai/determined/blob/master/helm/charts/determined/Chart.yaml>`_.


Prerequisites
-------------

Before installing Determined on a Kubernetes cluster, please ensure that the
following prerequisites are satisfied:

* The Kubernetes cluster should be running Kubernetes >= 1.15, with GPU support enabled. :ref:`Instructions for setting up a GKE cluster <setup-gke-cluster>`.
* You should have access to the cluster via `kubectl <https://kubernetes.io/docs/tasks/tools/install-kubectl/>`_.
* `Helm <https://helm.sh/docs/helm/helm_install/>`_ should be installed.
* You should have a local copy of the `Determined Helm Chart <https://github.com/determined-ai/determined/tree/master/helm/charts/determined>`_. This can be done by cloning the Determined repository: ``git clone https://github.com/determined-ai/determined.git``.


What Gets Installed
-------------------

When the Determined Helm chart is installed, the following entities will be created:

#. Deployment of the Determined master.
#. ConfigMap containing configurations for the Determined master.
#. LoadBalancer service to make the Determined master accessible.
#. ServiceAcccount which will be used by the Determined master.
#. Deployment of a Postgres database. Later in this guide, we demonstrate how an external database can be used instead.
#. PersistentVolumeClaim for the Postgres database. Omitted if using an external database.
#. Service to allow the Determined master to communicate with the Postgres database. Omitted if using an external database.


.. _configure-determined-kubernetes-version:

Configuring Which Version of Determined to Install
--------------------------------------------------

To configure which version of Determined users need to modify ``appVersion`` in ``Chart.yaml``. Users can specify
a release version (e.g., ``0.13.0``) or specify any commit hash from the `upstream Determined repo <https://github.com/determined-ai/determined>`_
(e.g., ``b13461ed06f2fad339e179af8028d4575db71a81``). Users are encouraged to use a released version.

.. note::

    If using a non-release branch of the Determined repository, ``appVersion`` is going to be set to ``X.Y.Z.dev0``.
    This is not an official release version and deploying this version will result in an ``ImagePullBackOff`` error.
    Users should remove ``.dev0`` to get the released version, or they can specify a specific commit hash
    instead.


Specifying the Number of GPUs Per Node
--------------------------------------

Users are required to specify the number of GPUs on each node (for GPU-enabled nodes only). This is done
by setting ``slotsPerNode`` in ``values.yaml``. Determined uses this information when scheduling multi-GPU tasks.
Each multi-GPU (distributed training) task will be scheduled as a set of ``slotsPerTask / slotsPerNode`` separate pods,
with each pod assigned to ``slotsPerNode`` GPUs. Tasks with sizes that are not divisible by ``slotsPerNode`` are never scheduled.
If you have a cluster of different size nodes (e.g., some nodes with 4 GPUs and
other nodes with 8 GPUs), set ``slotsPerNode`` to the smallest common denominator.


Configuring Checkpoint Storage
------------------------------

Checkpoints and TensorBoards events can be configured to be stored in ``shared_fs``, `AWS S3 <https://aws.amazon.com/s3/>`__,
or `GCS <https://cloud.google.com/storage>`__. By default checkpoints and TensorBoard events are stored using
``shared_fs`` which creates a `hostPath Volume <https://kubernetes.io/docs/concepts/storage/volumes/#hostpath>`__ and
saves to the host file system. Users are strongly discouraged from using ``shared_fs`` for storage
beyond initial testing as most Kubernetes cluster nodes do not have a shared file system.

Instead of using ``shared_fs``, users should configure either ``AWS S3`` or ``GCS``:

- ``AWS S3``: To configure Determined to use AWS S3 for checkpoint and TensorBoard storage, users need to set
  ``checkpointStorage.type`` in ``values.yaml`` to ``s3`` and set ``checkpointStorage.bucket`` to the name of
  the bucket. The pods launched by the Determined master must have read, write, and delete access
  to the bucket. To enable this users may optionally configure
  ``checkpointStorage.accessKey`` and
  ``checkpointStorage.secretKey``. Users may also optionally configure ``checkpointStorage.endpointUrl`` which
  specifies the endpoint to use for S3 clones (e.g., ``http://<minio-endpoint>:<minio-port|default=9000>``).

- ``GCS``: To configure Determined to use Google Cloud Storage for checkpoints and TensorBoard data, users need to
  set ``checkpointStorage.type`` in ``values.yaml`` to ``gcs`` and set ``checkpointStorage.bucket`` to the name of
  the bucket. The pods launched by the Determined master must have read, write, and delete access to the bucket.
  For example, when launching their `GKE nodes <https://cloud.google.com/sdk/gcloud/reference/container/node-pools/create>`__
  users need to specify ``--scopes=storage-full`` to configure proper GCS access.


Configuring an External Database (Optional)
-------------------------------------------

By default, the Helm chart will deploy an instance of Postgres on the same
Kubernetes cluster where Determined itself is deployed. If this is undesirable,
users can configure the Helm chart to use an external Postgres database by setting
``db.hostAddress`` to the IP address of their database. If ``db.hostAddress`` is
configured, the Determined Helm chart will not deploy a database.


Installing Determined
---------------------

Once finished making configuration changes in ``values.yaml`` and ``Chart.yaml``, Determined is ready to
be installed. To install Determined run:

.. code::

    helm install <name for your deployment> --wait helm/charts/determined

``helm/charts/determined`` is a relative path from the root of the Determined repository. Helm will install
Determined within the default namespace. If you wish to install Determined into a non-default namespace,
add ``-n <namespace name>`` to the command shown above.

Once the installation has completed, instructions will be displayed for
discovering the IP address assigned to the Determined master. The IP address can
also be discovered by running ``kubectl get services``.

Upgrading Determined
--------------------

To upgrade Determined or to change a configuration setting, first make the appropriate
changes in ``values.yaml`` and ``Chart.yaml``, and then run:

.. code::

    helm upgrade <name for your deployment> --wait helm/charts/determined


Next Steps
----------

- :ref:`quick-start`
- :ref:`helm-config`
- :ref:`useful-kubectl-commands`
- :ref:`limitations-on-kubernetes`
